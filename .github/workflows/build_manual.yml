# Conda package builds triggered manually.
# To trigger a build, bump the build number in .conda/meta.yaml.
name: Build (manual)

# Uncomment the following lines to trigger a build if the release build failed
on:
  push:
    paths:
      - '.conda/meta.yaml'
      - '.conda_mac/meta.yaml'
      - '.github/workflows/build_manual.yml'
    branches:
      # - develop
      # - fakebranch
      - elizabeth/Fix-ubuntu-conda-build

jobs:
  build:
    name: Build package from push (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04", "windows-2022", "macos-14"]
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        include:
          # Use this condarc as default
          - condarc: .conda/condarc.yaml
          - pyver: "3.7"
          # Use special condarc if macos
          - os: "macos-14"
            condarc: .conda_mac/condarc.yaml
            pyver: "3.9"
    steps:
      # Setup
      - uses: actions/checkout@v2
      - name: Cache conda
        uses: actions/cache@v1
        env:
          # Increase this value to reset cache if environment_build.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment_build.yml', 'requirements.txt') }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3.0.3
        with:
          miniforge-version: latest
          condarc-file: ${{ matrix.condarc }}
          python-version: ${{ matrix.pyver }}
          environment-file: environment_build.yml
          activate-environment: sleap_ci
          conda-solver: "libmamba"
          # use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

      - name: Print environment info
        shell: bash -l {0}
        run: |
          which python
          conda info
          conda list

      # Build pip wheel (Not Windows)
      - name: Build pip wheel (Not Windows)
        if: matrix.os != 'windows-2022'
        shell: bash -l {0}
        run: |
          python setup.py bdist_wheel

      # Upload pip wheel (Ubuntu)
      - name: Upload pip wheel (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        shell: bash -l {0}
        run: |
          twine upload -u __token__ -p "$PYPI_TOKEN" dist/* --non-interactive --skip-existing --disable-progress-bar

      # Build conda package (Ubuntu)
      # echo "{environment_variable_name}={value}" >> "$GITHUB_ENV"
      - name: Build conda package (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          conda build .conda --output-folder build
          echo "BUILD_PATH=$(pwd)/build" >> "$GITHUB_ENV"

      # Build conda package (Windows) 
      - name: Build conda package (Windows)
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          conda build .conda --output-folder build
          echo "BUILD_PATH=\$(pwd)\build" >> "$env:GITHUB_ENV"

      # Build conda package (Mac)
      - name: Build conda package (Mac)
        if: matrix.os == 'macos-14'
        shell: bash -l {0}
        run: |
          conda build .conda_mac --output-folder build
          echo "BUILD_PATH=$(pwd)/build" >> "$GITHUB_ENV"

      # Test
      - name: Test built conda package
        shell: bash -l {0}
        run: |
          echo "Build path is: $BUILD_PATH"
          conda deactivate
          echo $(conda info)
          echo "Testing conda package with sleap"
          conda create -y -n sleap_test -c file://$BUILD_PATH -c sleap/label/dev -c conda-forge -c nvidia -c anaconda sleap
          conda activate sleap_test
          echo $(conda list)
          python -c "import sleap; print(sleap.__version__)"
          echo "Test completed using sleap version: $(python -c 'import sleap; print(sleap.__version__)')"

      # # Login to conda (Ubuntu)
      # - name: Login to Anaconda (Ubuntu)
      #   if: matrix.os == 'ubuntu-22.04'
      #   env:
      #     ANACONDA_LOGIN: ${{ secrets.ANACONDA_LOGIN }}
      #   shell: bash -l {0}
      #   run: |
      #     yes 2>/dev/null | anaconda login --username sleap --password "$ANACONDA_LOGIN" || true
      
      # # Login to conda (Windows)
      # - name: Login to Anaconda (Windows)
      #   if: matrix.os == 'windows-2022'
      #   env:
      #     ANACONDA_LOGIN: ${{ secrets.ANACONDA_LOGIN }}
      #   shell: powershell
      #   run: |
      #     echo "yes" | anaconda login --username sleap --password "$env:ANACONDA_LOGIN"
      
      # # Login to conda (Mac)
      # - name: Login to Anaconda (Mac)
      #   if: matrix.os == 'macos-14'
      #   env:
      #     ANACONDA_LOGIN: ${{ secrets.ANACONDA_LOGIN }}
      #   shell: bash -l {0}
      #   run: |
      #     yes 2>/dev/null | anaconda login --username sleap --password "$ANACONDA_LOGIN" || true
      
      # # Upload conda package (Windows)
      # - name: Upload conda package (Windows/dev)
      #   if: matrix.os == 'windows-2022'
      #   shell: powershell
      #   run: |
      #     anaconda -v upload "build\win-64\*.tar.bz2" --label dev
      
      # # Upload conda package (Ubuntu)
      # - name: Upload conda package (Ubuntu/dev)
      #   if: matrix.os == 'ubuntu-22.04'
      #   shell: bash -l {0}
      #   run: |
      #     anaconda -v upload build/linux-64/*.tar.bz2 --label dev
      
      # # Upload conda package (Mac)
      # - name: Upload conda package (Mac/dev)
      #   if: matrix.os == 'macos-14'
      #   shell: bash -l {0}
      #   run: |
      #     anaconda -v upload build/osx-arm64/*.tar.bz2 --label dev
      
      # - name: Logout from Anaconda
      #   shell: bash -l {0}
      #   run: |
      #     anaconda logout
