# Conda package builds triggered manually.
# To trigger a build, bump the build number in .conda/meta.yaml.
name: Build (manual)

# Uncomment the following lines to trigger a build if the release build failed
on:
  push:
    paths:
      - '.conda/meta.yaml'
      - '.conda_apple_silicon/meta.yaml'
    branches:
      - develop
      # - liezl/update_environment_creation

jobs:
  build:
    name: Build package from push (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04", "windows-2022", "macos-latest"]
        # os: ["ubuntu-20.04"]
    steps:
      # Setup
      - uses: actions/checkout@v2
      - name: Cache conda
        uses: actions/cache@v1
        env:
          # Increase this value to reset cache if environment_build.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment_build.yml', 'requirements.txt') }}
      - name: Setup Miniconda
        # https://github.com/conda-incubator/setup-miniconda
        uses: conda-incubator/setup-miniconda@v2.0.1
        with:
          python-version: 3.7
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          environment-file: environment_build.yml
          condarc-file: .conda/condarc.yaml
          activate-environment: sleap_ci
      - name: Print environment info
        shell: bash -l {0}
        run: |
          which python
          conda info

      # Build pip wheel (Ubuntu)
      - name: Build pip wheel (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          python setup.py bdist_wheel

      # Upload pip wheel (Ubuntu)
      # - name: Upload pip wheel (Ubuntu)
      #   if: matrix.os == 'ubuntu-22.04'
      #   env:
      #     PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      #   shell: bash -l {0}
      #   run: |
      #     twine upload -u __token__ -p "$PYPI_TOKEN" dist/* --non-interactive --skip-existing --disable-progress-bar

      # Build conda package
      - name: Build conda package (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          conda build .conda --output-folder build -c https://conda.anaconda.org/sleap/ -c nvidia -c conda-forge
      - name: Build conda package (Windows)
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          conda activate sleap
          pytest tests/
          conda build .conda --output-folder build -c https://conda.anaconda.org/sleap/ -c nvidia -c conda-forge

      # Upload conda package
      - name: Login to Anaconda (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        env:
          ANACONDA_LOGIN: ${{ secrets.ANACONDA_LOGIN }}
        shell: bash -l {0}
        run: |
          yes 2>/dev/null | anaconda login --username sleap --password "$ANACONDA_LOGIN" || true
      - name: Login to Anaconda (Windows)
        if: matrix.os == 'windows-2022'
        env:
          ANACONDA_LOGIN: ${{ secrets.ANACONDA_LOGIN }}
        shell: powershell
        run: |
          echo "yes" | anaconda login --username sleap --password "$env:ANACONDA_LOGIN"
      - name: Upload conda package (Windows/dev)
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          anaconda -v upload "build\win-64\*.tar.bz2" --label dev
      - name: Upload conda package (Ubuntu/dev)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          anaconda -v upload build/linux-64/*.tar.bz2 --label dev
      - name: Logout from Anaconda
        shell: bash -l {0}
        run: |
          anaconda logout
