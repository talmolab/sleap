"""Transformers for creating offset regression maps."""

import tensorflow as tf


def make_offsets(points, xv, yv):
    """Make point offset maps on a grid.
    
    Args:
        points: Point locations as a `tf.Tensor` of shape `(n_points, 2)` and dtype
            `tf.float32` where each row specifies the x- and y-coordinates of the map
            centers. Each point will generate a different map.
        xv: Sampling grid vector for x-coordinates of shape `(grid_width,)` and dtype
            tf.float32. This can be generated by
            `sleap.nn.data.utils.make_grid_vectors`.
        yv: Sampling grid vector for y-coordinates of shape `(grid_height,)` and dtype
            tf.float32. This can be generated by
            `sleap.nn.data.utils.make_grid_vectors`.
    
    Returns:
        The offset maps as a `tf.Tensor` of shape
        `(grid_height, grid_width, n_points, 2)` and dtype `tf.float32`. The last axis
        corresponds to the x- and y-offsets at each grid point for each input point.
    
    See also:
        sleap.nn.data.utils.make_grid_vectors
    """
    
    # Vectorize for broadcasting.
    xv = tf.reshape(xv, [1, -1, 1, 1])
    yv = tf.reshape(yv, [-1, 1, 1, 1])
    x = tf.reshape(tf.gather(points, 0, axis=1), [1, 1, -1, 1])
    y = tf.reshape(tf.gather(points, 1, axis=1), [1, 1, -1, 1])
    
    # Compute offsets.
    dx = x - xv
    dy = y - yv
    
    # Broadcast and concatenate into a single tensor.
    shape = tf.broadcast_dynamic_shape(tf.shape(dx), tf.shape(dy))
    offsets = tf.concat([
        tf.broadcast_to(dx, shape),
        tf.broadcast_to(dy, shape)
    ], axis=-1)
    
    return offsets

